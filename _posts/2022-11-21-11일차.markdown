---
layout: 네이버 클라우드 AIaas 과정 1기 11일차 수업 내용
title:  "네이버 클라우드 AIaas 과정 1기 11일차 수업 내용"
date:   2022-11-18 23:59 +0900
categories: darktemi update
---

## vagrant & virtual Box

- 생성한 vm-project 디렉토리는 VM 생성 정보 프로젝트 디렉토리
- vagrantfile 은 VM 생성 시의 설정 정보

- virtualBox VMs 폴더





---
## CVS vs SVN vs GIT

### CVS란? 

**CVS(Concurrent Versions System, 동시 버전 시스템)**는 **동시 버전 관리 시스템(Concurrent Versioning System)**으로도 알려져 있으며, **버전 관리 시스템을 구현**한다. 보통 소프트웨어 프로젝트를 진행할 때, 파일로 이뤄진 모든 작업과 모든 변화를 추적하고, 여러 개발자(지역적으로 떨어진)가 협력하여 작업할 수 있게 한다. CVS는 GNU 일반 공중 사용 허가서 하에서 배포된다. CVS는 오픈 소스 프로젝트에서 널리 사용되었다. 현재는 CVS가 한계를 맞아, CVS를 대체하는 서브버전이 개발되었다.

- Check in(=commit) : 서버에 업로드<br>
**파일을 통째로 서버에 전송함**<br>

- Check out : 서버에서 로컬로 다운로드

- 중앙 집중 방식
각 파일의 마지막 **Snapshot**을 가져온다 → **이전 작업 내용은 확인 불가**


- 중앙 집중 방식의 단점

1. 서버에서 변경내역 관리 => 중앙 집중 방식 → 서버에 문제 발생 시 변경 내역 모두 날림.
2. 파일을 통째로 서버에 전송하기 때문에 변경 내용 외 기존 내용까지 전송하므로<br>
Overhead가 발생하여 네트워크 과다 소비하게 됨.

---
### SVN(Subversion)

**서브버전(Subversion)**은 **자유 소프트웨어 버전 관리 시스템**이다. 명령 줄 인터페이스에서 사용하는 명령어를 따서 **SVN**이라고 줄여서 부르기도 한다. 제한이 있던 CVS를 대체하기 위해 2000년부터 콜랩넷에서 개발되었다. 현재는 아파치 최상위 프로젝트로서 전 세계 개발자 커뮤니티와 함께 개발되고 있다.

서브 버전은 클라이언트 서버 모델을 따른다. 서버는 작업하는 컴퓨터 내에 둘 수도 있고, 전산망에 연결된 별도의 컴퓨터에 두고 사용할 수도 있다. 서브버전 서버와 클라이언트는 **http, https, svn, svn+ssh의 규약으로 통신**한다.

- SVN의 장점

1. CVS 의 단점을 보완 → 파일의 **변경 부분만** 서버에 업로드
2. CVS 보다 **Network Overhead가 적다.**

---
### GIT(VCS : Version Control System)이란?

분산 버전 관리 방식

**서버 repository**를 **로컬(Local)**에 **복제(clone)**하여 **프로젝트 파일 + 변경내역 모두 복사**

- 변경 내용 Commit하면 **Local repository에 저장**
업로드를 하고 싶을 때 Push하여 업로드

- GIT의 장점

1. **저장소(repository)를 분산/복제(clone)**하여 서버에 문제가 생기더라고 **백업 가능**
2. 필요할 때만 **업로드(Push)**하면 되기때문에 **Network Overhead가 적다.**

※ 참고

RCS는 혼자 작업 시 로컬 버전 관리 시스템
여러 명과 협업 시에 협업 불가




