---
layout: 네이버 클라우드 AIaas 과정 1기 11일차 수업 내용
title:  "네이버 클라우드 AIaas 과정 1기 11일차 수업 내용"
date:   2022-11-18 23:59 +0900
categories: darktemi update
---


---
# vagrant & virtual Box

- 생성한 vm-project 디렉토리는 VM 생성 정보 프로젝트 디렉토리
- vagrantfile 은 VM 생성 시의 설정 정보
- virtualBox VMs 폴더는 VM의 프로젝트 들을 보관
- virtualBox VMs 폴더 내에 있는 폴더들이 VM 프로젝트

---
## **버전 관리 시스템(VCS; Version Control System)**이란?

### - 개요

  - 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다.
  - 파일 별로 이전 상태로 되돌리거나 프로젝트 통째로 이전 상태로 되돌릴 수 있다.
  - 시간에 따라 수정 내용을 비교해 볼 수 있다.
  - 누가 문제를 일으켰는지 추적할 수 있고, 누가 언제 만들어 낸 이슈인지도 알 수 있다.<br>

### - 종류

  #### - 로컬 버전 관리 시스템

    - 간단한 데이터베이스를 이용하여 파일에서 변경되는 부분(patch set)을 관리한다.
    - 예) RCS(Revision Control System)
    - RCS는 혼자 작업 시 버전 관리를 할 수 있으나 여러 명과 협업 불가<Br>

  #### - 중앙집중식 버전 관리

    - 파일의 마지막 스냅샷을 받는다(checkout).
    - 스냅샷(snapshot)? 특정 시점의 파일 버전을 기록한 것.
    - 로컬은 한 개의 스냅샵만 유지한다.
    - 만약 서버에 문제가 생기면 모든 변경 내력(history)을 잃는다.
    - 로컬에 있는 스냅샵 중에서 최신 버전으로 복구한다.
    - 예) CVS, Subversion(SVN), Perforce 등
    - CVS: commit 할 때 파일 전체를 보관한다.
    - Subversion: commit 할 때 파일에서 변경한 부분만 보관한다.<br>
  
  #### - 분산 버전 관리 시스템

    - 저장소 전부를 복제한다.
    - 변경 내력(history)까지 모두 복제한다.
    - 예) Git, Mercurial, Bazaar, Darcs 등

---
# CVS vs SVN vs GIT

- ## CVS란? 

- **CVS(Concurrent Versions System, 동시 버전 시스템)**는 **동시 버전 관리 시스템(Concurrent Versioning System)**으로도 알려져 있으며,**버전 관리 시스템을 구현**한다.<br>
보통 소프트웨어 프로젝트를 진행할 때, 파일로 이뤄진 모든 작업과 모든 변화를 추적하고, 여러 개발자(지역적으로 떨어진)가 협력하여 작업할 수 있게 한다.<br>
CVS는 GNU 일반 공중 사용 허가서 하에서 배포된다. CVS는 오픈 소스 프로젝트에서 널리 사용되었다. 현재는 CVS가 한계를 맞아, CVS를 대체하는 서브버전이 개발되었다.

- Check in(=commit) : 서버에 업로드<br>
**파일을 통째로 서버에 전송함**<br>

- Check out : 서버에서 로컬로 다운로드

---
## SVN(Subversion)

**서브버전(Subversion)**은 **자유 소프트웨어 버전 관리 시스템**이다. 명령 줄 인터페이스에서 사용하는 명령어를 따서 **SVN**이라고 줄여서 부르기도 한다.<br>
제한이 있던 CVS를 대체하기 위해 2000년부터 콜랩넷에서 개발되었다.<Br>
현재는 아파치 최상위 프로젝트로서 전 세계 개발자 커뮤니티와 함께 개발되고 있다.

서브 버전은 클라이언트 서버 모델을 따른다.<br>
서버는 작업하는 컴퓨터 내에 둘 수도 있고, 전산망에 연결된 별도의 컴퓨터에 두고 사용할 수도 있다.<br>
서브버전 서버와 클라이언트는 **http, https, svn, svn+ssh의 규약으로 통신**한다.

### - SVN의 장점

1. CVS 의 단점을 보완 → 파일의 **변경 부분만** 서버에 업로드
2. CVS 보다 **Network Overhead가 적다.**

---
## CVS와 SVN의 중앙 집중 방식

- 각 파일의 마지막 **Snapshot**을 가져온다 → **이전 작업 내용은 확인 불가**<br>
- **Snapshot**은 **특정 시점의 파일 버전을 기록**한 것.<br>


- ### 중앙 집중 방식의 단점

1. 서버에서 변경내역 관리 => 중앙 집중 방식 → **서버에 문제 발생 시 변경 내역 모두 날림.**
2. 파일을 통째로 서버에 전송하기 때문에 변경 내용 외 기존 내용까지 전송하므로<br>
**Network Overhead가 발생**하여 네트워크 과다 소비하게 됨.

---
## GIT(VCS : Version Control System)이란?

**깃(Git /ɡɪt/)**은 컴퓨터 파일의 변경사항을 추적하고 여러 명의 사용자들 간에 해당 파일들의 작업을 조율하기 위한 스냅샷 스트림 기반의 **분산 버전 관리 시스템**이다. 또는 이러한 명령어를 가리킨다.<br>
소프트웨어 개발에서 **소스 코드 관리에 주로 사용**되지만 어떠한 파일 집합의 변경사항을 지속적으로 추적하기 위해 사용될 수 있다.<br>
기하학적 **불변 이론을 바탕으로 설계**됐고, **분산 버전 관리 시스템**으로서 **빠른 수행 속도**에 중점을 두고 있는 것이 특징이며 **데이터 무결성**, **분산**, **비선형 워크플로**를 지원한다.<br>

Git은 2005년에 리눅스 커널 개발을 위해 초기 개발에 기여한 다른 커널 개발자들과 함께 2005년에 리누스 토르발스가 처음 개발한 것이다.<br>
2005년부터 지금까지 주니오 하마노(Junio Hamano)가 소프트웨어의 유지보수를 맡고 있다.<Br>

다른 대부분의 분산 버전 관리 시스템처럼, 또 대부분의 클라이언트-서버 시스템과 달리, 모든 노드의 모든 깃 디렉터리는 네트워크 접속이나 중앙 서버와는 독립적으로 동작하는 완전한 이력 및 완전한 버전 추적 등, 모든 기능을 갖춘 저장소이다.<Br>

깃은 GNU 일반 공중 사용 허가서 v2 하에 배포되는 자유 소프트웨어이다.<Br>

### 목표

  - 빠른 속도
  - 단순한 구조
  - 수천 개의 동시다발적인 브랜치가 가능한 비선형적인 구조
  - 완벽한 분산
  - 대형 프로젝트에서도 유용할 것

**서버 repository**를 **로컬(Local)**에 **복제(clone)**하여 **프로젝트 파일 + 변경내역 모두 복사**<br>

- 변경 내용 Commit하면 **Local repository에 저장**<br>
업로드를 하고 싶을 때 Push하여 업로드<Br>

### GIT의 장점<br>

1. **저장소(repository)를 분산/복제(clone)**하여 서버에 문제가 생기더라고 **백업 가능**<Br>
2. 필요할 때만 **업로드(Push)**하면 되기때문에 **Network Overhead가 적다.**<Br>

---
## Git의 파일 상태

Git은 다음 세가지 상태로 파일을 관리한다.

### - Committed(= git commig 한 상태)

  - **로컬 데이터베이스(저장소; Repository)에 안전하게 저장**<br>

### - Modified

  - **파일이 변경되었지만** 아직 **로컬 데이터베이스에 저장되지 않았다는 뜻**<br>

### - Staged(= git add 를 한 상태)

  - **로컬 데이터베이스에 저장할 파일 임을 표시**
  - **다음에 커밋을 수행할 때 Staged로 표시된 파일의 변경 내용이 저장**

---
## Git 프로젝트의 단계

Git 프로젝트는 다음 세 가지 단계로 관리된다.

### - .git Directory

  - 프로젝트의 **메타데이터**와 **객체 데이터베이스**를 **저장하는 곳**.
  즉 변경 내력과 그 내용이 저장된다.
  - **원격 저장소를 clone 할 때 생성됨.**
  - **숨김 파일로 관리됨.**
  - **.git**은 **git client가 관리하는 폴더** → **사용자가 직접 변경해서는 안됨.**

### - Working Directory

  - 특정 버전을 체크아웃(checkout)하면, `.git` 디렉토리에 있는 압축된 데이터베이스에서 파일을 가져와서 작업 디렉토리를 만든다.

- Staging Area
  - `.git` 디렉토리에 존재하는 단순한 파일이다.
  - commit 할 파일의 정보(*스냅샷이라 부른다*)를 담고 있다.
  - `git commit`을 실행하면 이 스냅샷에 기록된 파일을 저장소에 보관하는 것이다.
  - 커밋을 한 후에는 Staging Area는 새 스냅샷을 준비한다.
  - Staging Area는 *인덱스*라는 이름으로도 부르지만, *Staging Area* 가 표준 이름으로 사용되는 추세이다.
